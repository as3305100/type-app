
name: type-node-app

on: 
 push:
   branches: ["main"]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
    # this permissions contents : write means it allows to write in the repository
       contents: write 
    env:
      IMAGE_NAME: as3305100/type-app
      IMAGE_TAG: build-${{github.sha}}
     
     steps: 
       - name: checkout the source code
         uses: actions/checkout@v4
         with: 
          persist-credentials: true
       - name: Build docker image
         run: docker build -t ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} --platform linux/amd64 .
       - name: Login into docker hub
         uses: docker/login-action@v3
         with: 
           username: ${{secrets.DOCKERHUB_USERNAME}}
           password: ${{secrets.DOCKERHUB_PASSWORD}}
       - name: Push docker image to docker hub
         run: docker push ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
       - name: update compose yaml
         uses: fjogeleit/yaml-update-action@v0.16.1
         with:
          valueFile: compose.yaml
          propertyPath: 'services["type-server"].image'
          value: ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          commitChange: false
       - name: commit the compose.yaml file change in github
         run: |
           git config user.name github-actions
           git config user.email github-action@github.com
           git add .
           git commit -m "bump the large version ${{env.IMAGE_TAG}}"
           git push

  deploy: 
    name: Deploy the image to Docker swarm cluster
    runs-on: ubuntu-latest
    env:
     IMAGE_NAME: as3305100/type-app
     IMAGE_TAG: build-${{github.sha}}
    needs: 
      - build-and-push
    steps:
      - name: SSH into the server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{secrets.SWARM_MANAGER_HOST}}
          username: ${{secrets.SWARM_HOST_USERNAME}}
          key: ${{secrets.SWARM_HOST_SSH_KEY}}
          port: ${{secrets.SWARM_HOST_SSH_PORT}}
          script: |
            set -e
            cd ~/type-app

            #pull compose file using git
            
            git fetch origin main
            git checkout origin/main

            sudo docker pulldocker pull ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
            sudo docker stack deploy -c compose.yaml my-type-app